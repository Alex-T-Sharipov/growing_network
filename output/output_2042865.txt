torch.cuda.is_available()=True
args=Namespace(data=None, data_dir='/home/sharipov/monet/data/CIFAR10', dataset='torch/CIFAR10', train_split='train', val_split='validation', dataset_download=False, class_map='', model='MONet_T_16_double', pretrained=False, initial_checkpoint='', resume='', no_resume_opt=False, num_classes=10, gp=None, img_size=None, in_chans=None, input_size=[3, 32, 32], crop_pct=None, mean=None, std=None, interpolation='', batch_size=64, validation_batch_size=None, channels_last=False, fuser='', grad_accum_steps=1, grad_checkpointing=False, fast_norm=False, model_kwargs={}, head_init_scale=None, head_init_bias=None, torchscript=False, torchcompile=None, opt='adamw', opt_eps=None, opt_betas=None, momentum=0.9, weight_decay=0.01, clip_grad=None, clip_mode='norm', layer_decay=None, opt_kwargs={}, sched='cosine', sched_on_updates=False, lr=0.0001, lr_base=0.001, lr_base_size=256, lr_base_scale='', lr_noise=None, lr_noise_pct=0.67, lr_noise_std=1.0, lr_cycle_mul=1.0, lr_cycle_decay=0.5, lr_cycle_limit=1, lr_k_decay=1.0, warmup_lr=1e-05, min_lr=1e-05, epochs=300, epoch_repeats=0.0, start_epoch=None, decay_milestones=[90, 180, 270], decay_epochs=90, warmup_epochs=10, warmup_prefix=False, cooldown_epochs=0, patience_epochs=10, decay_rate=0.1, no_aug=False, scale=[0.08, 1.0], ratio=[0.75, 1.3333333333333333], hflip=0.5, vflip=0.0, color_jitter=0.4, aa=None, aug_repeats=0, aug_splits=0, jsd_loss=False, bce_loss=False, bce_target_thresh=None, reprob=0.0, remode='pixel', recount=1, resplit=False, mixup=0.5, cutmix=0.5, cutmix_minmax=None, mixup_prob=1.0, mixup_switch_prob=0.5, mixup_mode='batch', mixup_off_epoch=0, smoothing=0.1, train_interpolation='random', drop=0.0, drop_connect=None, drop_path=None, drop_block=None, bn_momentum=None, bn_eps=None, sync_bn=False, dist_bn='reduce', split_bn=False, model_ema=False, model_ema_force_cpu=False, model_ema_decay=0.9998, seed=42, worker_seeding='all', log_interval=50, recovery_interval=0, checkpoint_hist=1, workers=4, save_images=False, amp=False, amp_dtype='float16', amp_impl='native', no_ddp_bb=False, synchronize_step=False, pin_mem=False, no_prefetcher=False, output='', experiment='Upd_Exp31_CIFAR10_monet_double', eval_metric='top1', tta=0, local_rank=0, use_multi_epochs_loader=False, log_wandb=False, strategy='5', initialization_choice='1', double_at_epoch='150')




{}




init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
init kaiming normal
Epoch 0; current number of active layers: 8; total number of active layers: 16; double at epoch: 150; doubling now? False
Need initialization: 0
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
active layers: 8;  act layers minus need init: 8
Reset the need_initialization to 0
forward!

tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0',
       grad_fn=<SelectBackward0>)
tensor([0.0100, 0.0100, 0.0100, 0.0100, 0.0100, 0.3300, 0.0100, 0.0100, 0.5900,
        0.0100], device='cuda:0')
Output shape: torch.Size([64, 10])
Target shape: torch.Size([64, 10])
True classes shape: torch.Size([64])
True classes: tensor([8, 3, 8, 4, 2, 6, 3, 0, 6, 7, 9, 5, 6, 3, 8, 1, 7, 2, 2, 2, 6, 3, 9, 8,
        6, 6, 2, 1, 6, 8, 0, 5, 9, 8, 3, 4, 6, 3, 1, 6, 3, 9, 4, 3, 3, 4, 5, 2,
        7, 1, 8, 5, 6, 5, 2, 8, 0, 9, 4, 3, 0, 1, 5, 5], device='cuda:0')
Correct preds: 4; Total predictions: 64; Accuracy: 6.25
6.25
Current acc1: 6.25
